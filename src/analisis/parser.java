
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 07 16:23:50 CST 2022
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import static proyecto1_olc.Proyecto1_OLC.*;
import estructuras.*;
/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 07 16:23:50 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\005\004" +
    "\000\002\005\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\007\003\000\002\026\002\000\002" +
    "\010\010\000\002\027\002\000\002\017\005\000\002\020" +
    "\005\000\002\020\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\021\005\000\002\021\003\000\002\030\002\000\002" +
    "\011\005\000\002\012\003\000\002\012\003\000\002\031" +
    "\002\000\002\013\005\000\002\032\002\000\002\022\005" +
    "\000\002\022\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\005\000\002\014\004\000\002\015\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\003\005\007\006\001\002\000\004\002" +
    "\000\001\002\000\006\006\105\010\104\001\002\000\010" +
    "\012\013\014\014\016\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\006\004\uffe9\011\uffe9" +
    "\001\002\000\012\010\046\012\013\014\014\016\011\001" +
    "\002\000\012\010\ufff7\012\ufff7\014\ufff7\016\ufff7\001\002" +
    "\000\004\004\020\001\002\000\012\010\ufff9\012\ufff9\014" +
    "\ufff9\016\ufff9\001\002\000\012\010\ufffa\012\ufffa\014\ufffa" +
    "\016\ufffa\001\002\000\012\010\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\001\002\000\004\016\021\001\002\000\004\011\ufff6" +
    "\001\002\000\004\011\023\001\002\000\014\004\026\006" +
    "\031\017\030\020\032\021\024\001\002\000\010\005\uffee" +
    "\006\uffee\013\uffee\001\002\000\010\005\ufff4\006\ufff4\013" +
    "\ufff4\001\002\000\010\005\uffec\006\uffec\013\uffec\001\002" +
    "\000\012\010\ufff5\012\ufff5\014\ufff5\016\ufff5\001\002\000" +
    "\010\005\ufff0\006\ufff0\013\ufff0\001\002\000\010\005\uffed" +
    "\006\uffed\013\uffed\001\002\000\010\005\uffef\006\uffef\013" +
    "\uffef\001\002\000\010\005\036\006\040\013\034\001\002" +
    "\000\014\004\026\006\031\017\030\020\032\021\024\001" +
    "\002\000\012\010\ufff1\012\ufff1\014\ufff1\016\ufff1\001\002" +
    "\000\014\004\026\006\031\017\030\020\032\021\024\001" +
    "\002\000\012\010\ufff3\012\ufff3\014\ufff3\016\ufff3\001\002" +
    "\000\012\010\uffea\012\uffea\014\uffea\016\uffea\001\002\000" +
    "\004\006\042\001\002\000\012\010\ufff2\012\ufff2\014\ufff2" +
    "\016\ufff2\001\002\000\006\006\040\013\034\001\002\000" +
    "\012\010\uffeb\012\uffeb\014\uffeb\016\uffeb\001\002\000\012" +
    "\010\046\012\013\014\014\016\011\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\uffff\001\002\000\004\002\ufffc" +
    "\001\002\000\006\004\055\011\052\001\002\000\026\006" +
    "\uffe5\007\uffe5\015\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\001\002\000\012\010\uffe8\012" +
    "\uffe8\014\uffe8\016\uffe8\001\002\000\012\010\uffe7\012\uffe7" +
    "\014\uffe7\016\uffe7\001\002\000\004\015\060\001\002\000" +
    "\012\010\uffe6\012\uffe6\014\uffe6\016\uffe6\001\002\000\012" +
    "\010\uffd6\012\uffd6\014\uffd6\016\uffd6\001\002\000\004\006" +
    "\061\001\002\000\012\010\uffd5\012\uffd5\014\uffd5\016\uffd5" +
    "\001\002\000\026\006\074\007\071\015\063\022\065\023" +
    "\064\024\077\025\072\026\075\027\066\030\067\001\002" +
    "\000\026\006\uffdf\007\uffdf\015\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\026" +
    "\006\uffd9\007\uffd9\015\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\001\002\000\026\006\uffda" +
    "\007\uffda\015\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\001\002\000\026\006\uffdc\007\uffdc" +
    "\015\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\001\002\000\026\006\uffdb\007\uffdb\015\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\001\002\000\026\006\uffe3\007\uffe3\015\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001" +
    "\002\000\004\016\100\001\002\000\026\006\uffdd\007\uffdd" +
    "\015\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\001\002\000\012\010\uffe4\012\uffe4\014\uffe4" +
    "\016\uffe4\001\002\000\012\010\uffe1\012\uffe1\014\uffe1\016" +
    "\uffe1\001\002\000\026\006\uffde\007\uffde\015\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\001" +
    "\002\000\026\006\uffd8\007\uffd8\015\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\001\002\000" +
    "\026\006\uffe0\007\uffe0\015\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002\000\004\010" +
    "\101\001\002\000\026\006\uffd7\007\uffd7\015\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\001" +
    "\002\000\026\006\074\007\071\015\063\022\065\023\064" +
    "\024\077\025\072\026\075\027\066\030\067\001\002\000" +
    "\012\010\uffe2\012\uffe2\014\uffe2\016\uffe2\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\011\007\016\010\015" +
    "\011\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\050\001\001\000\014\004\044\005\046\007\016" +
    "\010\015\011\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\021\001\001\000\002\001" +
    "\001\000\006\017\026\023\024\001\001\000\002\001\001" +
    "\000\004\027\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\036\021\034\001\001\000\004\023\042\001" +
    "\001\000\002\001\001\000\004\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\043\001\001\000\002\001\001\000\014" +
    "\004\044\005\047\007\016\010\015\011\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\052\013\053\014\055\001\001\000\004\031\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\072\024\067\025\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\102\024\067\025\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        errores.NewError("Sintactico", ""+s.value,s.left+1,s.right+1);
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errores.NewError("Sintactico", ""+s.value,s.left+1,s.right+1); 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    NodoConjunto nc;
    String ch1="";
    NodoExpresion nodE;
    String identi="";
    boolean esCon=false;
    ListaExpresiones listEx;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEF_EXP ::= CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            regularExpression.ActualizaValor(identi,ca);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_EXP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_EXP ::= DOSPUNTOS DEF_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_CONJ ::= LLAVE1 ID LLAVE2 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONJ",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_POL ::= EXP_CONJ 
            {
              String RESULT =null;
		int excoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int excoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exco = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=exco;
            esCon=true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_POL ::= COMILLA2 
            {
              String RESULT =null;
		int comi2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comi2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comi2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=comi2;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_POL ::= COMILLA1 
            {
              String RESULT =null;
		int comi1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comi1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comi1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=comi1;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_POL ::= OPTIONAL1 
            {
              String RESULT =null;
		int optileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opti = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=opti;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_POL ::= POSITIVE1 
            {
              String RESULT =null;
		int posileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String posi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=posi;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_POL ::= OR1 
            {
              String RESULT =null;
		int orrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String orr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=orr;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP_POL ::= KLEENE1 
            {
              String RESULT =null;
		int kleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String kle = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=kle;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP_POL ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=ca;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP_POL ::= CONCAT1 
            {
              String RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=co;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MAS_EXP_POL ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
                regularExpression.AgregarExp(identi,listEx);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_EXP_POL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAS_EXP_POL ::= EXP_POL NT$4 MAS_EXP_POL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String epp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_EXP_POL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;
		int eppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                listEx.AgregarExpresion(epp,esCon);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REG_EXP ::= FLECHA NT$3 MAS_EXP_POL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REG_EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;

          listEx=new ListaExpresiones();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDENTIFICATOR2 ::= LISTA_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDENTIFICATOR2 ::= REG_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDENTIFICATOR ::= ID NT$2 IDENTIFICATOR2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                identi=id;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAS_CAR ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
            conjuntos.AgregarConjunto(nc);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_CAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAS_CAR ::= COMA CHAAR MAS_CAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            nc.AgregaReglas(c);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_CAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CHAAR ::= DOSPUNTOS 
            {
              String RESULT =null;
		
            RESULT=":";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CHAAR ::= PUNTOCOMA 
            {
              String RESULT =null;
		
            RESULT=";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CHAAR ::= LETRA 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=le;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CHAAR ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=en;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CHAAR ::= CARACTER 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=ca;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_CONJ2 ::= MAS_CAR 
            {
              Object RESULT =null;
		
            nc.rango=false;
            nc.AgregaReglas(ch1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAR_CONJ2 ::= GUIONC CHAAR PUNTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            nc.rango=true;
            nc.AgregaReglas(ch1);
            nc.AgregaReglas(c);
            conjuntos.AgregarConjunto(nc);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR_CONJ ::= CHAAR NT$1 VAR_CONJ2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            ch1=c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONJUNTOS ::= CONJ1 DOSPUNTOS ID NT$0 FLECHA VAR_CONJ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            nc=new NodoConjunto(id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SEPARADORES1 ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEPARADORES1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SEPARADORES1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION2 ::= LLAVE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION2 ::= INSTRUCCION INSTRUCCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error LLAVE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= LLAVE1 INSTRUCCION INSTRUCCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

